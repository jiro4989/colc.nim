/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI128139 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI128137 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128267 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI128153 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI128016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI128015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI131014 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NNI128016 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "argsCount", len: 0, typ: NTI104, name: "argsCount", sons: null}, 
{kind: 1, offset: "format", len: 0, typ: NTI138, name: "format", sons: null}]};
NTI128016.node = NNI128016;
NTI128015.base = NTI128016;
NTI131014.base = NTI128015;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI128153.base = NTI128015;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
NTI128267.base = NTI138;
NTI128139.base = NTI138;
var NNI128137 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI138, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI128139, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI138, name: "Field2", sons: null}]};
NTI128137.node = NNI128137;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function nimCharToStr(x_15262) {
	var result_15263 = null;

		result_15263 = nimCopy(null, mnewString(1), NTI138);
		result_15263[0] = x_15262;

	return result_15263;

}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}
var cs_131016 = nimCopy(null, [{name: makeNimstrLit("S"), argsCount: 3, format: makeNimstrLit("{0}{2}({1}{2})")}, {name: makeNimstrLit("K"), argsCount: 2, format: makeNimstrLit("{0}")}, {name: makeNimstrLit("I"), argsCount: 1, format: makeNimstrLit("{0}")}], NTI131014);

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function nsuStartsWith(s_110896, prefix_110897) {
						var Tmp3;

	var result_110898 = false;

	BeforeRet: do {
		var i_110900 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (((prefix_110897 != null ? prefix_110897.length : 0) <= i_110900)) {
					result_110898 = true;
					break BeforeRet;
					}
					
						if (((s_110896 != null ? s_110896.length : 0) <= i_110900)) Tmp3 = true; else {							Tmp3 = !((s_110896[i_110900] == prefix_110897[i_110900]));						}					if (Tmp3) {
					result_110898 = false;
					break BeforeRet;
					}
					
					i_110900 += 1;
				}
		} while(false);
	} while (false);

	return result_110898;

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2827;
		var e_20445 = null;
		F.line = 2828;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2829;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2830;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3783;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3790;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function take_bracket_combinator_128026(code_128028) {
	var result_128029 = null;

	var F={procname:"combinator.takeBracketCombinator",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
		F.line = 13;
		var cnt_128030 = 0;
		L1: do {
			F.line = 14;
			var c_128032 = 0;
			F.line = 3840;
			var i_128054 = 0;
			F.line = 3841;
			var l_128056 = (code_128028 != null ? code_128028.length : 0);
			L2: do {
				F.line = 3842;
					L3: while (true) {
					if (!(i_128054 < l_128056)) break L3;
						F.line = 3843;
						c_128032 = code_128028[chckIndx(i_128054, 0, code_128028.length+0-1)-0];
						F.line = 15;
						if (result_128029 != null) { addChar(result_128029, c_128032); } else { result_128029 = [c_128032]; };
						F.line = 17;
						switch (c_128032) {
						case 40:
							F.line = 18;
							cnt_128030 = addInt(cnt_128030, 1);
							break;
						case 41:
							F.line = 19;
							cnt_128030 = subInt(cnt_128030, 1);
							break;
						default: 
							break;
						}
						if ((cnt_128030 <= 0)) {
						F.line = 23;
						break L1;
						}
						
						F.line = 3844;
						i_128054 = addInt(i_128054, 1);
						if (!(((code_128028 != null ? code_128028.length : 0) == l_128056))) {
						F.line = 3845;
						failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.0/lib/system.nim(3845, 11) `len(a) == L` string modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_128029;

}

function take_prefix_combinator_128070(code_128072, cs_128074) {
	var result_128075 = null;

	var F={procname:"combinator.takePrefixCombinator",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((code_128072 != null ? code_128072.length : 0) <= 0)) {
		F.line = 31;
		result_128075 = nimCopy(null, [], NTI138);
		break BeforeRet;
		}
		
		if (nsuStartsWith(code_128072, makeNimstrLit("("))) {
		F.line = 33;
		result_128075 = nimCopy(null, take_bracket_combinator_128026(code_128072), NTI138);
		break BeforeRet;
		}
		
		L1: do {
			F.line = 34;
			var c_128114 = null;
			F.line = 2159;
			var i_128118 = 0;
			L2: do {
				F.line = 2160;
					L3: while (true) {
					if (!(i_128118 < (cs_128074 != null ? cs_128074.length : 0))) break L3;
						F.line = 2161;
						c_128114 = cs_128074[chckIndx(i_128118, 0, cs_128074.length+0-1)-0];
						if (nsuStartsWith(code_128072, c_128114.name)) {
						F.line = 36;
						result_128075 = nimCopy(null, c_128114.name, NTI138);
						break BeforeRet;
						}
						
						F.line = 2162;
						i_128118 = addInt(i_128118, 1);
					}
			} while(false);
		} while(false);
		F.line = 37;
		result_128075 = nimCopy(null, nimCharToStr(code_128072[chckIndx(0, 0, code_128072.length+0-1)-0]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_128075;

}

function new_seq_128148(len_128152) {
	var result_128154 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 706;
		result_128154 = new Array(len_128152); for (var i=0;i<len_128152;++i) {result_128154[i]=null;}	framePtr = F.prev;

	return result_128154;

}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function HEX5BHEX5D_45874(s_45879, x_45882) {
	var result_45883 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3568;
		var a_46001 = x_45882.a;
		F.line = 3569;
		var l_46201 = addInt(subInt(x_45882.b, a_46001), 1);
		F.line = 3570;
		result_45883 = nimCopy(null, mnewString(chckRange(l_46201, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3571;
			var i_46211 = 0;
			F.line = 3528;
			var i_46223 = 0;
			L2: do {
				F.line = 3529;
					L3: while (true) {
					if (!(i_46223 < l_46201)) break L3;
						F.line = 3530;
						i_46211 = i_46223;
						F.line = 3571;
						result_45883[chckIndx(i_46211, 0, result_45883.length+0-1)-0] = s_45879[chckIndx(addInt(i_46211, a_46001), 0, s_45879.length+0-1)-0];
						F.line = 3531;
						i_46223 = addInt(i_46223, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_45883;

}

function HEX2EHEX2E_45828(a_45833, b_45835) {
	var result_45837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 341;
		result_45837.a = a_45833;
		F.line = 342;
		result_45837.b = b_45835;
	framePtr = F.prev;

	return result_45837;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4169;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4170;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4171;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4172;
			var i_23442 = 0;
			F.line = 2016;
			var colontmp__23444 = 0;
			F.line = 4172;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2019;
			var res_23447 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2021;
						i_23442 = res_23447;
						F.line = 4173;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2022;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function substr_23464(s_23466, first_23467) {
	var result_23469 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4182;
		result_23469 = nimCopy(null, substr_23422(s_23466, first_23467, (s_23466 != null ? (s_23466.length-1) : -1)), NTI138);
	framePtr = F.prev;

	return result_23469;

}

function nsuJoinSep(a_111144, sep_111145) {
	var result_111146 = null;

		if ((0 < (a_111144 != null ? a_111144.length : 0))) {
		var l_111161 = ((sep_111145 != null ? sep_111145.length : 0) * ((a_111144 != null ? a_111144.length : 0) - 1));
		L1: do {
			var i_111180 = 0;
			var colontmp__111210 = 0;
			colontmp__111210 = (a_111144 != null ? (a_111144.length-1) : -1);
			var res_111213 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_111213 <= colontmp__111210)) break L3;
						i_111180 = res_111213;
						l_111161 += (a_111144[i_111180] != null ? a_111144[i_111180].length : 0);
						res_111213 += 1;
					}
			} while(false);
		} while(false);
		result_111146 = nimCopy(null, mnewString(0), NTI138);
		if (result_111146 != null) { result_111146 = (result_111146).concat(a_111144[0]); } else { result_111146 = a_111144[0].slice(); };
		L4: do {
			var i_111208 = 0;
			var colontmp__111218 = 0;
			colontmp__111218 = (a_111144 != null ? (a_111144.length-1) : -1);
			var res_111221 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_111221 <= colontmp__111218)) break L6;
						i_111208 = res_111221;
						if (result_111146 != null) { result_111146 = (result_111146).concat(sep_111145); } else { result_111146 = sep_111145.slice(); };
						if (result_111146 != null) { result_111146 = (result_111146).concat(a_111144[i_111208]); } else { result_111146 = a_111144[i_111208].slice(); };
						res_111221 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_111146 = nimCopy(null, [], NTI138);
		}
		

	return result_111146;

}

function take_combinator_128132(code_128134, cs_128136) {
	var result_128142 = {Field0: null, Field1: null, Field2: null};

	var F={procname:"combinator.takeCombinator",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		var pref_128143 = take_prefix_combinator_128070(code_128134, cs_128136);
		F.line = 44;
		F.line = 419;
		var result_128179 = new_seq_128148(0);
		L1: do {
			F.line = 420;
			var it_128187 = null;
			F.line = 2159;
			var i_128358 = 0;
			L2: do {
				F.line = 2160;
					L3: while (true) {
					if (!(i_128358 < (cs_128136 != null ? cs_128136.length : 0))) break L3;
						F.line = 2161;
						it_128187 = cs_128136[chckIndx(i_128358, 0, cs_128136.length+0-1)-0];
						if (eqStrings(it_128187.name, pref_128143)) {
						F.line = 421;
						if (result_128179 != null) { result_128179.push(it_128187); } else { result_128179 = [it_128187]; };
						}
						
						F.line = 2162;
						i_128358 = addInt(i_128358, 1);
					}
			} while(false);
		} while(false);
		var matched_128200 = nimCopy(null, result_128179, NTI128153);
		if (((matched_128200 != null ? matched_128200.length : 0) <= 0)) {
		F.line = 46;
		break BeforeRet;
		}
		
		F.line = 48;
		var co_128208 = matched_128200[chckIndx(0, 0, matched_128200.length+0-1)-0];
		F.line = 50;
		var code2_128251 = HEX5BHEX5D_45874(code_128134, HEX2EHEX2E_45828((pref_128143 != null ? pref_128143.length : 0), subInt((code_128134 != null ? code_128134.length : 0), 1)));
		F.line = 51;
		var args_128268 = nimCopy(null, [], NTI128267);
		L4: do {
			F.line = 52;
			var i_128280 = 0;
			F.line = 2016;
			var colontmp__128360 = 0;
			F.line = 52;
			colontmp__128360 = co_128208.argsCount;
			F.line = 2019;
			var res_128363 = 1;
			L5: do {
				F.line = 2020;
					L6: while (true) {
					if (!(res_128363 <= colontmp__128360)) break L6;
						F.line = 2021;
						i_128280 = res_128363;
						if (eqStrings(code2_128251, [])) {
						F.line = 54;
						break L4;
						}
						
						F.line = 55;
						var c_128283 = take_prefix_combinator_128070(code2_128251, cs_128136);
						if (eqStrings(c_128283, [])) {
						F.line = 57;
						nimCopy(result_128142, {Field0: pref_128143, Field1: [], Field2: substr_23464(code2_128251, (pref_128143 != null ? pref_128143.length : 0))}, NTI128137);
						break BeforeRet;
						}
						
						F.line = 58;
						var Tmp7 = nimCopy(null, c_128283, NTI138);
						if (args_128268 != null) { args_128268.push(Tmp7); } else { args_128268 = [Tmp7]; };
						F.line = 59;
						code2_128251 = nimCopy(null, HEX5BHEX5D_45874(code2_128251, HEX2EHEX2E_45828((c_128283 != null ? c_128283.length : 0), subInt((code2_128251 != null ? code2_128251.length : 0), 1))), NTI138);
						F.line = 2022;
						res_128363 = addInt(res_128363, 1);
					}
			} while(false);
		} while(false);
		F.line = 61;
		var joined_128353 = (pref_128143).concat(nsuJoinSep(args_128268, []));
		F.line = 62;
		nimCopy(result_128142, {Field0: pref_128143, Field1: args_128268, Field2: substr_23464(code_128134, (joined_128353 != null ? joined_128353.length : 0))}, NTI128137);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_128142;

}

function nsuFindChar(s_111416, sub_111417, start_111418, last_111419) {
		var Tmp1;

	var result_111421 = 0;

	BeforeRet: do {
		if ((last_111419 == 0)) {
		Tmp1 = (s_111416 != null ? (s_111416.length-1) : -1);
		}
		else {
		Tmp1 = last_111419;
		}
		
		var last_111423 = Tmp1;
		L2: do {
			var i_111809 = 0;
			var colontmp__112013 = 0;
			colontmp__112013 = start_111418;
			var res_112016 = colontmp__112013;
			L3: do {
					L4: while (true) {
					if (!(res_112016 <= last_111423)) break L4;
						i_111809 = res_112016;
						if ((sub_111417 == s_111416[i_111809])) {
						result_111421 = i_111809;
						break BeforeRet;
						}
						
						res_112016 += 1;
					}
			} while(false);
		} while(false);
		result_111421 = -1;
		break BeforeRet;
	} while (false);

	return result_111421;

}

function nsuInitSkipTable(a_111262, sub_111263) {
		var m_111264 = (sub_111263 != null ? sub_111263.length : 0);
		var i_111266 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_111266 <= 248)) break L2;
					a_111262[(i_111266 + 0)] = m_111264;
					a_111262[(i_111266 + 1)] = m_111264;
					a_111262[(i_111266 + 2)] = m_111264;
					a_111262[(i_111266 + 3)] = m_111264;
					a_111262[(i_111266 + 4)] = m_111264;
					a_111262[(i_111266 + 5)] = m_111264;
					a_111262[(i_111266 + 6)] = m_111264;
					a_111262[(i_111266 + 7)] = m_111264;
					i_111266 += 8;
				}
		} while(false);
		L3: do {
			var i_111288 = 0;
			var colontmp__111291 = 0;
			colontmp__111291 = (m_111264 - 1);
			var i_111294 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_111294 < colontmp__111291)) break L5;
						i_111288 = i_111294;
						a_111262[sub_111263[i_111288]] = ((m_111264 - 1) - i_111288);
						i_111294 += 1;
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_111311, s_111312, sub_111313, start_111314, last_111315) {
		var Tmp1;

	var result_111317 = 0;

	BeforeRet: do {
		if ((last_111315 == 0)) {
		Tmp1 = (s_111312 != null ? (s_111312.length-1) : -1);
		}
		else {
		Tmp1 = last_111315;
		}
		
		var last_111319 = Tmp1;
		var s_len_111320 = ((last_111319 - start_111314) + 1);
		var sub_last_111321 = ((sub_111313 != null ? sub_111313.length : 0) - 1);
		if ((sub_last_111321 == -1)) {
		result_111317 = start_111314;
		break BeforeRet;
		}
		
		var skip_111323 = start_111314;
		L2: do {
				L3: while (true) {
				if (!(sub_last_111321 <= (last_111319 - skip_111323))) break L3;
					var i_111324 = sub_last_111321;
					L4: do {
							L5: while (true) {
							if (!(s_111312[(skip_111323 + i_111324)] == sub_111313[i_111324])) break L5;
								if ((i_111324 == 0)) {
								result_111317 = skip_111323;
								break BeforeRet;
								}
								
								i_111324 -= 1;
							}
					} while(false);
					skip_111323 += a_111311[s_111312[(skip_111323 + sub_last_111321)]];
				}
		} while(false);
		result_111317 = -1;
		break BeforeRet;
	} while (false);

	return result_111317;

}

function nsuReplaceStr(s_112509, sub_112510, by_112511) {
	var result_112512 = null;

	BeforeRet: do {
		result_112512 = nimCopy(null, [], NTI138);
		var sub_len_112513 = (sub_112510 != null ? sub_112510.length : 0);
		if ((sub_len_112513 == 0)) {
		L1: do {
			var c_112515 = 0;
			var i_112532 = 0;
			var l_112534 = (s_112509 != null ? s_112509.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_112532 < l_112534)) break L3;
						c_112515 = s_112509[i_112532];
						if (result_112512 != null) { result_112512 = (result_112512).concat(by_112511); } else { result_112512 = by_112511.slice(); };
						if (result_112512 != null) { addChar(result_112512, c_112515); } else { result_112512 = [c_112515]; };
						i_112532 += 1;
						if (!(((s_112509 != null ? s_112509.length : 0) == l_112534))) {
						failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.0/lib/system.nim(3845, 11) `len(a) == L` string modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (result_112512 != null) { result_112512 = (result_112512).concat(by_112511); } else { result_112512 = by_112511.slice(); };
		break BeforeRet;
		}
		else {
		if ((sub_len_112513 == 1)) {
		var c_112516 = sub_112510[0];
		var last_112518 = (s_112509 != null ? (s_112509.length-1) : -1);
		var i_112520 = 0;
		L4: do {
				L5: while (true) {
				if (!true) break L5;
					var j_112521 = nsuFindChar(s_112509, c_112516, i_112520, last_112518);
					if ((j_112521 < 0)) {
					break L4;
					}
					
					if (result_112512 != null) { result_112512 = (result_112512).concat(substr_23422(s_112509, i_112520, (j_112521 - 1))); } else { result_112512 = substr_23422(s_112509, i_112520, (j_112521 - 1)).slice(); };
					if (result_112512 != null) { result_112512 = (result_112512).concat(by_112511); } else { result_112512 = by_112511.slice(); };
					i_112520 = (j_112521 + sub_len_112513);
				}
		} while(false);
		if (result_112512 != null) { result_112512 = (result_112512).concat(substr_23464(s_112509, i_112520)); } else { result_112512 = substr_23464(s_112509, i_112520).slice(); };
		}
		else {
			var a_112522 = [new Int32Array(256)];
			nsuInitSkipTable(a_112522[0], sub_112510);
			var last_112525 = (s_112509 != null ? (s_112509.length-1) : -1);
			var i_112527 = 0;
			L6: do {
					L7: while (true) {
					if (!true) break L7;
						var j_112528 = nsuFindStrA(a_112522[0], s_112509, sub_112510, i_112527, last_112525);
						if ((j_112528 < 0)) {
						break L6;
						}
						
						if (result_112512 != null) { result_112512 = (result_112512).concat(substr_23422(s_112509, i_112527, (j_112528 - 1))); } else { result_112512 = substr_23422(s_112509, i_112527, (j_112528 - 1)).slice(); };
						if (result_112512 != null) { result_112512 = (result_112512).concat(by_112511); } else { result_112512 = by_112511.slice(); };
						i_112527 = (j_112528 + sub_len_112513);
					}
			} while(false);
			if (result_112512 != null) { result_112512 = (result_112512).concat(substr_23464(s_112509, i_112527)); } else { result_112512 = substr_23464(s_112509, i_112527).slice(); };
		}
		}
	} while (false);

	return result_112512;

}

function calc_format_128380(co_128382, args_128384) {
	var result_128385 = null;

	var F={procname:"combinator.calcFormat",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((args_128384 != null ? args_128384.length : 0) < co_128382.argsCount)) {
		F.line = 68;
		result_128385 = nimCopy(null, (co_128382.name).concat(nsuJoinSep(args_128384, [])), NTI138);
		break BeforeRet;
		}
		
		F.line = 70;
		result_128385 = nimCopy(null, co_128382.format, NTI138);
		L1: do {
			F.line = 71;
			var i_128401 = 0;
			F.line = 3527;
			var colontmp__128404 = 0;
			F.line = 71;
			colontmp__128404 = co_128382.argsCount;
			F.line = 3528;
			var i_128407 = 0;
			L2: do {
				F.line = 3529;
					L3: while (true) {
					if (!(i_128407 < colontmp__128404)) break L3;
						F.line = 3530;
						i_128401 = i_128407;
						F.line = 72;
						var f_128402 = (makeNimstrLit("{")).concat(cstrToNimstr((i_128401)+""),makeNimstrLit("}"));
						F.line = 73;
						result_128385 = nimCopy(null, nsuReplaceStr(result_128385, f_128402, args_128384[chckIndx(i_128401, 0, args_128384.length+0-1)-0]), NTI138);
						F.line = 3531;
						i_128407 = addInt(i_128407, 1);
					}
			} while(false);
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_128385;

}

function calc_clcode1time_128422(code_128424, cs_128426) {
	var result_128427 = null;

	var F={procname:"combinator.calcCLCode1Time",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 79;
		var co_tuple_128428 = take_combinator_128132(code_128424, cs_128426);
		F.line = 80;
		F.line = 419;
		var result_128440 = new_seq_128148(0);
		L1: do {
			F.line = 420;
			var it_128448 = null;
			F.line = 2159;
			var i_128473 = 0;
			L2: do {
				F.line = 2160;
					L3: while (true) {
					if (!(i_128473 < (cs_128426 != null ? cs_128426.length : 0))) break L3;
						F.line = 2161;
						it_128448 = cs_128426[chckIndx(i_128473, 0, cs_128426.length+0-1)-0];
						if (eqStrings(it_128448.name, co_tuple_128428.Field0)) {
						F.line = 421;
						if (result_128440 != null) { result_128440.push(it_128448); } else { result_128440 = [it_128448]; };
						}
						
						F.line = 2162;
						i_128473 = addInt(i_128473, 1);
					}
			} while(false);
		} while(false);
		var matched_128461 = nimCopy(null, result_128440, NTI128153);
		if (((matched_128461 != null ? matched_128461.length : 0) < 1)) {
		F.line = 82;
		result_128427 = nimCopy(null, code_128424, NTI138);
		break BeforeRet;
		}
		
		F.line = 83;
		var co_128469 = matched_128461[chckIndx(0, 0, matched_128461.length+0-1)-0];
		F.line = 84;
		result_128427 = nimCopy(null, (calc_format_128380(co_128469, co_tuple_128428.Field1)).concat(co_tuple_128428.Field2), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_128427;

}

function calc_clcode_128487(code_128489, cs_128491, n_128493) {
	var result_128494 = null;

	var F={procname:"combinator.calcCLCode",prev:framePtr,filename:"combinator.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 90;
		var m_128495 = n_128493;
		if ((m_128495 == 0)) {
		F.line = 92;
		result_128494 = nimCopy(null, code_128489, NTI138);
		break BeforeRet;
		}
		
		if ((-1 < m_128495)) {
		F.line = 94;
		m_128495 = subInt(m_128495, 1);
		}
		
		F.line = 95;
		var ret_128507 = calc_clcode1time_128422(code_128489, cs_128491);
		if (eqStrings(code_128489, ret_128507)) {
		F.line = 97;
		result_128494 = nimCopy(null, code_128489, NTI138);
		break BeforeRet;
		}
		
		F.line = 98;
		result_128494 = nimCopy(null, calc_clcode_128487(ret_128507, cs_128491, m_128495), NTI138);
	} while (false);
	framePtr = F.prev;

	return result_128494;

}

function calcCLCode(code_131035) {
	var result_131036 = null;

	var F={procname:"colc.calcCLCode",prev:framePtr,filename:"colc.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 11;
		result_131036 = toJSStr(calc_clcode_128487(cstrToNimstr(code_131035), cs_131016, -1));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_131036;

}
